import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {
    public static class Employee {
        private int employeeId;
        private String name;
        private double leaveBalance;

        public Employee(int employeeId, String name, double leaveBalance) {
            this.employeeId = employeeId;
            this.name = name;
            this.leaveBalance = leaveBalance;
        }

        public int getEmployeeId() {
            return employeeId;
        }

        public String getName() {
            return name;
        }

        public double getLeaveBalance() {
            return leaveBalance;
        }

        public boolean deductLeave(double days) {
            if (leaveBalance >= days) {
                leaveBalance -= days;
                return true;
            } else {
                System.out.println("Insufficient leave balance! Only " + leaveBalance + " days available.");
                return false;
            }
        }
    }


    public static class LeaveRequest {
        private int requestId;
        private Employee employee;
        private LocalDate startDate;
        private LocalDate endDate;
        private String leaveType;
        private String status;

        public LeaveRequest(int requestId, Employee employee, LocalDate startDate, LocalDate endDate, String leaveType) {
            this.requestId = requestId;
            this.employee = employee;
            this.startDate = startDate;
            this.endDate = endDate;
            this.leaveType = leaveType;
            this.status = "Pending";
        }

        public int getRequestId() {
            return requestId;
        }

        public Employee getEmployee() {
            return employee;
        }

        public LocalDate getStartDate() {
            return startDate;
        }

        public LocalDate getEndDate() {
            return endDate;
        }

        public String getLeaveType() {
            return leaveType;
        }

        public String getStatus() {
            return status;
        }


        public boolean approveRequest() {
            double days = java.time.temporal.ChronoUnit.DAYS.between(startDate, endDate) + 1;
            if (employee.deductLeave(days)) {
                this.status = "Approved";
                return true;
            } else {
                this.status = "Rejected - Insufficient Leave Balance";
                return false;
            }
        }

        public void rejectRequest(String reason) {
            this.status = "Rejected - " + reason;
        }
    }


    public static class LeaveManager {
        private List<LeaveRequest> leaveRequests;

        public LeaveManager() {
            this.leaveRequests = new ArrayList<>();
        }

        public void addLeaveRequest(LeaveRequest request) {
            leaveRequests.add(request);
        }

        public void processRequest(int requestId, boolean isApproved) {
            LeaveRequest foundRequest = null;
            for (LeaveRequest request : leaveRequests) {
                if (request.getRequestId() == requestId) {
                    foundRequest = request;
                    break;
                }
            }

            if (foundRequest == null) {
                System.out.println("Invalid Request ID.");
                return;
            }

            if (isApproved) {
                boolean approved = foundRequest.approveRequest();
                if (approved) {
                    System.out.println("Leave request approved for " + foundRequest.getEmployee().getName() + ".");
                } else {
                    System.out.println("Leave request could not be approved due to insufficient balance.");
                }
            } else {
                Scanner scanner = new Scanner(System.in);
                System.out.print("Enter rejection reason: ");
                String reason = scanner.nextLine();
                foundRequest.rejectRequest(reason);
                System.out.println("Leave request rejected for " + foundRequest.getEmployee().getName() + ". Reason: " + reason);
            }
        }

        public void viewRequests() {
            if (leaveRequests.isEmpty()) {
                System.out.println("No leave requests available.");
                return;
            }

            for (LeaveRequest request : leaveRequests) {
                System.out.println("Request ID: " + request.getRequestId() +
                        ", Employee: " + request.getEmployee().getName() +
                        ", Status: " + request.getStatus() +
                        ", Leave Type: " + request.getLeaveType() +
                        ", Start Date: " + request.getStartDate() +
                        ", End Date: " + request.getEndDate());
            }
        }
    }


    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        LeaveManager leaveManager = new LeaveManager();


        while (true) {
            System.out.println("\n=== Employee Leave Management System ===");
            System.out.println("1. Create Leave Request");
            System.out.println("2. Process Leave Request");
            System.out.println("3. View All Leave Requests");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            if (choice == 1) {
                System.out.print("Enter your first name: ");
                String firstName = scanner.nextLine();

                System.out.print("Enter your last name: ");
                String lastName = scanner.nextLine();

                String fullName = firstName + " " + lastName;

                System.out.print("Enter your leave balance (e.g., 15.5 days): ");
                double leaveBalance = scanner.nextDouble();
                scanner.nextLine();

                Employee employee = new Employee(leaveManager.leaveRequests.size() + 1, fullName, leaveBalance);

                System.out.print("Enter start date (YYYY-MM-DD): ");
                LocalDate startDate = LocalDate.parse(scanner.next());

                System.out.print("Enter end date (YYYY-MM-DD): ");
                LocalDate endDate = LocalDate.parse(scanner.next());

                System.out.print("Enter leave type (e.g., Annual, Sick): ");
                String leaveType = scanner.next();

                LeaveRequest leaveRequest = new LeaveRequest(leaveManager.leaveRequests.size() + 1, employee, startDate, endDate, leaveType);
                leaveManager.addLeaveRequest(leaveRequest);
                System.out.println("Leave request created successfully!");

            } else if (choice == 2) {
                System.out.print("Enter Request ID to process: ");
                int requestId = scanner.nextInt();

                System.out.print("Approve leave? (true for approve, false for reject): ");
                boolean isApproved = scanner.nextBoolean();

                leaveManager.processRequest(requestId, isApproved);

            } else if (choice == 3) {
                leaveManager.viewRequests();

            } else if (choice == 4) {
                System.out.println("Exiting the system...");
                break;
            } else {
                System.out.println("Invalid choice. Please try again.");
            }
        }

        scanner.close();
    }
}
